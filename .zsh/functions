# cds into an directory and make an ls and pwd
function cd() {
  builtin cd "$@" && ls && pwd
}

# Shows lines of a file
# Usage: slns <startline> <endline> <file>
function slns() {
  tail -n +$1 $3 | head -n $(($2-$1+1))
}

# Create a new directory and enter it
# USAGE: mkd folder
function mkd() {
    mkdir -p "$@" && cd "$@";
}

# calculator aligator :)
# USAGE calc <arithmetic expression>
function calc() {
  echo "$*" | bc -l
}

# touches a file and (if needed) it's parent directories
# USAGE: touch folder/folder2/file.extension
function touch() {
  if (($# < 1)); then
    echo "Missing argument";
    return 1;
  fi

  for f in "$@"; do
    mkdir -p -- "$(dirname -- "$f")" && command touch -- "$f"
  done
}

# script to configure an extern display
# default is left can be overriden with --right
# <setDisplay | setDisplay --right>
function setDisplay() {
  local VGA='DP-1-1'
  local HDMI='HDMI-1-1'
  local INTERN='eDP-1-1'
  local returnValue=0

  local connected=$(xrandr --query | grep $HDMI | tail -1 | cut -d \  -f 2)

  local hdmiConnected=$(xrandr --query | grep $HDMI | tail -1 | cut -d \  -f 2 | grep ^connected)
  local vgaConnected=$(xrandr --query | grep $VGA | tail -1 | cut -d \  -f 2 | grep ^connected)

  [[ $vgaConnected ]] && EXTERN=$VGA
  [[ $hdmiConnected ]] && EXTERN=$HDMI

  if [[ ! -z $EXTERN ]];
  then
    local resolution=$(xrandr --query | grep -C 1 $EXTERN | tail -1 | awk '{print $1}')

    if [[ "$1" == "--right" ]];
    then
      $(xrandr --output $EXTERN --mode $resolution --right-of $INTERN)
    elif [ -z "$1" ]
    then
      $(xrandr --output $EXTERN --mode $resolution --left-of $INTERN)
    else
      echo ERROR: wrong parameter
      returnValue=1
    fi
  else
   echo ERROR: No display is connected!
   echo set to default
   xrandr --output $HDMI --off
   xrandr --output $VGA --off
   returnValue=2
  fi
  
  # Just to set intern display as primary output for nm-applet
  xrandr --output $INTERN --mode 1920x1080 --primary

  return $returnValue
}

# toggles the touchpad from latpop
# USAGE: toggleTouchPad
function toggleTouchPad() {
  declare -i ID
  ID=`xinput list | grep -Eio 'touchpad\s*id\=[0-9]{1,2}' | grep -Eo '[0-9]{1,2}'`
  declare -i STATE
  STATE=`xinput list-props $ID|grep 'Device Enabled'|awk '{print $4}'`
  if [ $STATE -eq 1 ]
  then
      xinput disable $ID
      # echo "Touchpad disabled."
      # notify-send 'Touchpad' 'Disabled' -i /usr/share/icons/Adwaita/48x48/devices/input-touchpad.png
  else
      xinput enable $ID
      # echo "Touchpad enabled."
      # notify-send 'Touchpad' 'Enabled' -i /usr/share/icons/Adwaita/48x48/devices/input-touchpad.png
  fi
}

# Create a logbook entry
# USAGE: lb
function lb() {
    n ~/Documents/logbook/$(date '+%Y-%m-%d').md
}

# Set's the backlight a given percent
# USAGE: backlight <percent>
function backlight {
    local percent="$1"
    light -S $percent
}

# gets all function comments and the function names
function getFunctions() {
  grep -E '^#|^function' $HOME/.zsh/functions | sed 's/{/\n/g'
}

# pseudofunc to print my keybindings
# for my poker3
function getKeyBindings() {
    echo '------ LAYER 1 -------'
    echo 'fn    + d      -> volume -'
    echo 'fn    + s      -> volume +'
    echo 'fn    + f      -> mute'
    echo '------ LAYER 2 -------'
    echo 'fn    + q      -> pos1'
    echo 'fn    + e      -> end'
    echo 'fn    + w      -> up'
    echo 'fn    + a      -> left'
    echo 'fn    + s      -> down'
    echo 'fn    + d      -> right'
    echo 'shift + esc    -> ~'
    echo 'esc            -> `'
}
